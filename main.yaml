AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Native Chef Stack v4.0.0

Parameters:
  # Required Parameters
  ChefName:
    Description: Supply name for whole Chef infrastructure
    Type: String
  AutomationBucket:
    Default: 'aws-native-chef-server'
    Type: String
    Description: AWS S3 bucket name that contains all of the cloudformation templates and scripts for this stack
  VPC:
    Description: Choose VPC to use
    Type: AWS::EC2::VPC::Id
  ServerSubnets:
    Description: Provide a list of Subnet IDs for the Chef Servers (must be within the specified VPC)
    Type: List<AWS::EC2::Subnet::Id>
  InboundAdminSecurityGroupId:
    Description: Select an existing Security Group in your VPC to define administrative ACLs (SSH, monitoring tools, etc) to the Chef servers
    Type: AWS::EC2::SecurityGroup::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
  ContactEmail:
    Description: Contact email for Cloudwatch notifications and instance tagging
    Type: String
  ContactDept:
    Description: Contact department for billing purposes
    Type: String
  ###############################################################################
  # Automate Stack Settings
  AutomateSSLCertificateARN:
    Description: SSL Certficate ARN for SSL Certficate (must begin with arn:aws:iam::)
    Type: String
  AutomateDnsRecordName:
    Description: The DNS A-record name to automatically create
    Type: String
    Default: 'automate'
  AutomateInstanceType:
    Description: EC2 Instance type for Automate server (M5 class recommended)
    Default: m5.large
    Type: String
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.12xlarge, m5.24xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge]
  AutomateDataVolumeSize:
    Description: Amount of storage space to allocate on a dedicated data volume (must be between 500 and 16000)
    Type: Number
    Default: 1000
  AutomateSamlCert:
    Type: String
    Default: ''
    NoEcho: true
    Description: Supply SAML generated for the automate authentication
  AutomateSamlURL:
    Type: String
    Default: ''
    Description: Supply SAML URL for authentication
  AutomateSamlUsernameAttr:
    Type: String
    Default: ''
    Description: Supply SAML username query
  AutomateSamlGroupsAttr:
    Type: String
    Default: ''
    Description: Supply SAML group query
  AutomateSamlEntityID:
    Type: String
    Default: ''
    Description: Supply SAML ID of automation
  AutomateSamlAdminGroup:
    Type: String
    Default: ''
    Description: OneIDM DL for automate full access

  ###############################################################################
  # Chef Server Stack Settings
  ChefSSLCertificateARN:
    Description: SSL Certficate ARN for SSL Certficate (must begin with arn:aws:iam::)
    Type: String
  ChefServerDnsRecordName:
    Description: The DNS A-record name to automatically create for Chef Server ALB
    Type: String
    Default: 'chef'
  ChefPushJobsDnsRecordName:
    Description: The DNS A-record name to automatically create for Push Jobs ELB
    Type: String
    Default: 'chef'
  ChefServerLdapConfiguration:
    Description: String with LDAP configuration to be injected into /etc/opscode/chef-server.rb
    Type: String
    NoEcho: true
    Default: ''
  ChefInstanceType:
    Description: EC2 Instance type for Chef Server Frontends (high-CPU recommended)
    Default: c5.large
    Type: String
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.12xlarge, m5.24xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge]
  ChefDBInstanceClass:
    Description: EC2 Instance type for RDS DBs (EBS Optimized instances recommended)
    Default: 'db.m4.large'
    Type: String
    AllowedValues: [db.t2.medium, db.t2.large, db.t2.xlarge, db.t2.2xlarge,
      db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge, db.m4.16xlarge,
      db.r4.large, db.r4.xlarge, db.r4.2xlarge, db.r4.4xlarge, db.r4.8xlarge, db.r4.16xlarge]
  ChefDBAllocatedStorage:
    Description: Storage size allocated for the database
    Default: '100'
    Type: String
  ChefDBIops:
    Description: IOPS allocated to the storage (storage size * 10)
    Default: '1000'
    Type: String
  ChefDBPassword:
    Description: Enter DB Password
    NoEcho: true
    Type: String
  ChefElasticSearchInstanceType:
    Description: The Instance type to use for ElasticSearch instances (Note, must have ephemeral storage, the instance type affects the total amount of elasticsearch storage. i3 strongly recommended)
    Type: String
    Default: 'i3.large.elasticsearch'
    AllowedValues: [
      'i3.large.elasticsearch', 'i3.xlarge.elasticsearch', 'i3.2xlarge.elasticsearch', 'i3.4xlarge.elasticsearch', 'i3.8xlarge.elasticsearch', 'i3.16xlarge.elasticsearch',
      'i2.xlarge.elasticsearch', 'i2.2xlarge.elasticsearch',
      'm3.medium.elasticsearch', 'm3.large.elasticsearch', 'm3.xlarge.elasticsearch', 'm3.medium.elasticsearch',
      'r3.large.elasticsearch', 'r3.xlarge.elasticsearch', 'r3.2xlarge.elasticsearch', 'r3.4xlarge.elasticsearch', 'r3.8xlarge.elasticsearch' ]
  ChefElasticSearchVersion:
    Description: Version of ElasticSearch to use. Chef 12.16 supports v2.3 or 5.x. (5.5 recommended for new installs)
    Type: String
    Default: '5.5'
    AllowedValues:
    - '2.3'
    - '5.3'
    - '5.5'
  ChefElasticSearchShardCount:
    Description: Number of ElasticSearch hosts to provision at launch (3 recommended)
    Default: 3
    Type: Number
  ChefElasticSearchReplicaCount:
    Description: Replication factor for ElasticSearch sha vrds (how many extra copies to keep)
    Default: 2
    Type: Number
  # Package Versions & Locations
  ChefServerPackage:
    Description: The URL to the chef server EL7 (chef-server-core) package which will be downloaded
    Type: String
    Default: 'https://packages.chef.io/files/stable/chef-server/12.17.33/el/7/chef-server-core-12.17.33-1.el7.x86_64.rpm'
  ChefManagePackage:
    Description: The URL to the chef-manage EL7 package which will be downloaded
    Type: String
    Default: 'https://packages.chef.io/files/stable/chef-manage/2.5.16/el/7/chef-manage-2.5.16-1.el7.x86_64.rpm'
  PushJobsPackage:
    Description: The URL to the push jobs server package which will be downloaded
    Type: String
    Default: 'https://packages.chef.io/files/stable/opscode-push-jobs-server/2.2.8/el/7/opscode-push-jobs-server-2.2.8-1.el7.x86_64.rpm'
  ReportingPackage:
    Description: The URL to the reporting package which will be downloaded
    Type: String
    Default: 'https://packages.chef.io/files/stable/opscode-reporting/1.8.0/el/7/opscode-reporting-1.8.0-1.el7.x86_64.rpm'
  FilebeatPackage:
    Description: Filebeat rpm URL
    Type: String
    Default: 'https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.6.6-x86_64.rpm'
  SigningProxy:
    Description: SigningProxy binary location
    Type: String
    Default: 'https://github.com/chef-customers/aws-signing-proxy/releases/download/v0.3.0/aws-signing-proxy'
  # BeforeScriptLocation:
  #   Description: The S3 location of the script which runs before the Main script (optional)
  #   Type: String
  #   Default: ''
  # AfterScriptLocation:
  #   Description: The S3 location of the script which runs after the Main script (optional)
  #   Type: String
  #   Default: ''

  ###############################################################################
  # Automate Stack Settings
  SupermarketSSLCertificateARN:
    Description: SSL Certficate ARN for SSL Certficate (must begin with arn:aws:iam::)
    Type: String
  SupermarketDnsRecordName:
    Description: The DNS A-record name to automatically create
    Type: String
    Default: 'supermarket'
  SupermarketInstanceType:
    Description: EC2 Instance type for Supermarket server (M5 class recommended)
    Default: m5.large
    Type: String
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge, m5.12xlarge, m5.24xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge, c5.18xlarge]
  SupermarketDataVolumeSize:
    Description: Amount of storage space to allocate for the Supermarket single OS volume
    Type: Number
    Default: 100
###############################################################################
# Security Settings (these apply to all stacks)
  LoadBalancerScheme:
    Description: Network Scheme for the ELB
    Type: String
    Default: internet-facing
    AllowedValues:
    - 'internet-facing'
    - 'internal'
  LoadBalancerSecurityGroupId:
    Description: Supply a security group for your load balancer (leave blank to have it created for you). Using the default security group is recommended.
    Type: String
    Default: ''
  FrontendSecurityGroupId:
    Description: Supply a security group for your chef frontends (leave blank to have it created for you). Using the default security group is recommended.
    Type: String
    Default: ''
  AssociatePublicIpAddress:
    Description: Assign public IP addresses to the Chef Servers or not
    Type: String
    Default: true
    AllowedValues:
    - true
    - false
  ExistingSecretsBucket:
    Description: Supply an S3 Bucket name for the Chef Servers to read/write config files to (leave blank to have it created for you)
    Type: String
    Default: ''
  ###############################################################################
  # Other Settings
  ChefAutomateToken:
    Description: The secret token used to communicate with the Chef Automate Server, for forwarding Visibility data.  Leave blank to disable.
    Type: String
    Default: 93a49a4f2482c64126f7b6015e6b0f30284287ee4054ff8807fb63d9cbd1c506
    NoEcho: True
  AutomateLicenseKey:
    Type: String
    Default: ''
    Description: License key for Automate 2.0
  ChefServerLicenseCount:
    Default: '25'
    Description: Enter how many licenses you have purchased
    Type: String
  AMIFlavor:
    Description: Choose the AMI Flavor, the High-Perf CentOS image or the stock and paid official RHEL image
    Type: String
    Default: 'centos'
    AllowedValues:
    - 'centos'
    - 'rhel'
  LogsRetentionInDays:
    Description: Specifies the number of days you want to retain cloudwatch log events.
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W2507

Conditions:
  CreateChefSecretsBucket:
    !Equals [ !Ref ExistingSecretsBucket, '' ]
  CreateLoadBalancerSecurityGroup:
    !Equals [ !Ref LoadBalancerSecurityGroupId, '' ]
  CreateFrontendSecurityGroup:
    !Equals [ !Ref FrontendSecurityGroupId, '' ]
  RHELAmiFlavor:
    !Equals [ !Ref AMIFlavor, 'rhel' ]

# Periodically regenerate this list using the 'generate_os_mappings.sh' script
Mappings:
  AMI:
    us-east-1:
      rhel: ami-0263422c8f3a06276
      centos: ami-02d6cb18eee337b0e

Resources:
  ChefBucket:
    Condition: CreateChefSecretsBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateFrontendSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Automate Server
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      SecurityGroupIngress:
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: 80
      - FromPort: 443
        IpProtocol: tcp
        SourceSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        ToPort: 443
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-FE-SG
      VpcId: !Ref VPC

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateLoadBalancerSecurityGroup
    Properties:
      GroupDescription: Setup Ingress/Egress for Automate Load Balancer
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        FromPort: 0
        IpProtocol: tcp
        ToPort: 65535
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 0.0.0.0/0
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ELB-SG
      VpcId: !Ref VPC

  AlertNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint:
            !Ref ContactEmail
          Protocol: email

# Logging Groups (Cloudwatch Logs)
#########################################################################################
  SystemLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  ChefAppLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  SupermarketAppLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

  AutomateAppLogs:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays

# Automate Stack
#########################################################################################
  AutomateStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AutomationBucket}/automate.yaml
      Parameters:
        ChefName: !Ref ChefName
        AutomationBucket: !Ref AutomationBucket
        VPC: !Ref VPC
        LoadBalancerSubnets: !Join [ ",", !Ref ServerSubnets ]
        AutomateSubnet: !Select [ "0", !Ref ServerSubnets ]
        SSLCertificateARN: !Ref AutomateSSLCertificateARN
        InboundAdminSecurityGroupId: !Ref InboundAdminSecurityGroupId
        ImageId: !If
          - RHELAmiFlavor
          - !FindInMap [AMI, !Ref "AWS::Region", rhel]
          - !FindInMap [AMI, !Ref "AWS::Region", centos]
        KeyName: !Ref KeyName
        ContactEmail: !Ref ContactEmail
        ContactDept: !Ref ContactDept
        AlertNotificationTopic: !Ref AlertNotificationTopic
        InstanceType: !Ref AutomateInstanceType
        DataVolumeSize: !Ref AutomateDataVolumeSize
        AutomateDataCollectorToken: !Ref ChefAutomateToken
        LoadBalancerScheme: !Ref LoadBalancerScheme
        LoadBalancerSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        FrontendSecurityGroupId: !If [CreateFrontendSecurityGroup, !Ref FrontendSecurityGroup, !Ref FrontendSecurityGroupId]
        AutomateDnsRecordName: !Ref AutomateDnsRecordName
        AMIFlavor: !Ref AMIFlavor
        SystemLogsGroup: !Ref SystemLogs
        AppLogsGroup: !Ref AutomateAppLogs
        SamlCert: !Ref AutomateSamlCert
        SamlURL: !Ref AutomateSamlURL
        SamlUsernameAttr: !Ref AutomateSamlUsernameAttr
        SamlGroupsAttr: !Ref AutomateSamlGroupsAttr
        SamlEntityID: !Ref AutomateSamlEntityID
        SamlAdminGroup: !Ref AutomateSamlAdminGroup
        AutomateLicenseKey: !Ref AutomateLicenseKey

# Chef Server Stack
#########################################################################################
  ChefServerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AutomationBucket}/chef_server_ha.yaml
      Parameters:
        ChefName: !Ref ChefName
        AutomationBucket: !Ref AutomationBucket
        VPC: !Ref VPC
        ChefServerSubnets: !Join [ ",", !Ref ServerSubnets ]
        SSLCertificateARN: !Ref ChefSSLCertificateARN
        InboundAdminSecurityGroupId: !Ref InboundAdminSecurityGroupId
        ImageId: !If
          - RHELAmiFlavor
          - !FindInMap [AMI, !Ref "AWS::Region", rhel]
          - !FindInMap [AMI, !Ref "AWS::Region", centos]
        KeyName: !Ref KeyName
        DBPassword: !Ref ChefDBPassword
        ContactEmail: !Ref ContactEmail
        ContactDept: !Ref ContactDept
        AlertNotificationTopic: !Ref AlertNotificationTopic
        InstanceType: !Ref ChefInstanceType
        DBInstanceClass: !Ref ChefDBInstanceClass
        DBAllocatedStorage: !Ref ChefDBAllocatedStorage
        DBIops: !Ref ChefDBIops
        ElasticSearchInstanceType: !Ref ChefElasticSearchInstanceType
        ElasticSearchVersion: !Ref ChefElasticSearchVersion
        ElasticSearchShardCount: !Ref ChefElasticSearchShardCount
        ElasticSearchReplicaCount: !Ref ChefElasticSearchReplicaCount
        LoadBalancerScheme: !Ref LoadBalancerScheme
        LoadBalancerSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        FrontendSecurityGroupId: !If [CreateFrontendSecurityGroup, !Ref FrontendSecurityGroup, !Ref FrontendSecurityGroupId]
        ChefServerAssociatePublicIpAddress: !Ref AssociatePublicIpAddress
        ChefSecretsBucket: !If [CreateChefSecretsBucket, !Ref ChefBucket, !Ref ExistingSecretsBucket]
        ChefAutomateServerUrl: !Sub "https://${AutomateStack.Outputs.DNSName}"
        ChefAutomateToken: !Ref ChefAutomateToken
        ChefServerDnsRecordName: !Ref ChefServerDnsRecordName
        ChefPushJobsDnsRecordName: !Ref ChefPushJobsDnsRecordName
        SupermarketDnsRecordName: !Ref SupermarketDnsRecordName
        AMIFlavor: !Ref AMIFlavor
        SystemLogsGroup: !Ref SystemLogs
        AppLogsGroup: !Ref ChefAppLogs
        LicenseCount: !Ref ChefServerLicenseCount
        LdapConfiguration: !Ref ChefServerLdapConfiguration
        ChefServerPackage: !Ref ChefServerPackage
        ChefManagePackage: !Ref ChefManagePackage
        PushJobsPackage: !Ref PushJobsPackage
        ReportingPackage: !Ref ReportingPackage
        FilebeatPackage: !Ref FilebeatPackage
        SigningProxy: !Ref SigningProxy

# Supermarket Stack
#########################################################################################
  SupermarketStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AutomationBucket}/supermarket.yaml
      Parameters:
        ChefName: !Ref ChefName
        AutomationBucket: !Ref AutomationBucket
        VPC: !Ref VPC
        LoadBalancerSubnets: !Join [ ",", !Ref ServerSubnets ]
        SupermarketSubnet: !Select [ "1", !Ref ServerSubnets ]
        SSLCertificateARN: !Ref SupermarketSSLCertificateARN
        InboundAdminSecurityGroupId: !Ref InboundAdminSecurityGroupId
        ImageId: !If
          - RHELAmiFlavor
          - !FindInMap [AMI, !Ref "AWS::Region", rhel]
          - !FindInMap [AMI, !Ref "AWS::Region", centos]
        KeyName: !Ref KeyName
        ContactEmail: !Ref ContactEmail
        ContactDept: !Ref ContactDept
        AlertNotificationTopic: !Ref AlertNotificationTopic
        ChefUrl: !Sub "https://${ChefServerStack.Outputs.DNSName}"
        InstanceType: !Ref SupermarketInstanceType
        DataVolumeSize: !Ref SupermarketDataVolumeSize
        LoadBalancerScheme: !Ref LoadBalancerScheme
        LoadBalancerSecurityGroupId: !If [CreateLoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroup, !Ref LoadBalancerSecurityGroupId]
        FrontendSecurityGroupId: !If [CreateFrontendSecurityGroup, !Ref FrontendSecurityGroup, !Ref FrontendSecurityGroupId]
        ChefSecretsBucket: !If [CreateChefSecretsBucket, !Ref ChefBucket, !Ref ExistingSecretsBucket]
        ChefStackName: !GetAtt ChefServerStack.Outputs.StackName
        SupermarketDnsRecordName: !Ref SupermarketDnsRecordName
        AMIFlavor: !Ref AMIFlavor
        SystemLogsGroup: !Ref SystemLogs
        AppLogsGroup: !Ref SupermarketAppLogs

Outputs: {}
